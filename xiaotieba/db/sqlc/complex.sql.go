// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: complex.sql

package db

import (
	"context"
)

const listUser = `-- name: ListUser :many

SELECT users.id, users.name ,COUNT(*) AS UserCount
FROM users
INNER JOIN post ON users.id = post.user_id
GROUP BY users.id,users.name
HAVING COUNT(*) >= $1
ORDER BY UserCount DESC
`

type ListUserRow struct {
	ID        int64  `json:"id"`
	Name      string `json:"name"`
	Usercount int64  `json:"usercount"`
}

func (q *Queries) ListUser(ctx context.Context, dollar_1 interface{}) ([]ListUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listUser, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUserRow{}
	for rows.Next() {
		var i ListUserRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Usercount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
