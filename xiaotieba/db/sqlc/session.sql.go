// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one

INSERT INTO session (
  id,
  username,
  refresh_token,
  useragent,
  client_ip,
  isblocked,
  expire_at
  
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, username, expire_at, created_at, client_ip, useragent, isblocked, refresh_token
`

type CreateSessionParams struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	RefreshToken string    `json:"refresh_token"`
	Useragent    string    `json:"useragent"`
	ClientIp     string    `json:"client_ip"`
	Isblocked    bool      `json:"isblocked"`
	ExpireAt     time.Time `json:"expire_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.Username,
		arg.RefreshToken,
		arg.Useragent,
		arg.ClientIp,
		arg.Isblocked,
		arg.ExpireAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ExpireAt,
		&i.CreatedAt,
		&i.ClientIp,
		&i.Useragent,
		&i.Isblocked,
		&i.RefreshToken,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM session
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, username, expire_at, created_at, client_ip, useragent, isblocked, refresh_token FROM session
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ExpireAt,
		&i.CreatedAt,
		&i.ClientIp,
		&i.Useragent,
		&i.Isblocked,
		&i.RefreshToken,
	)
	return i, err
}
